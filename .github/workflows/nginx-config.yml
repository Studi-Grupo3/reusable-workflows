name: Configure NGINX Services

on:
  workflow_call:
    inputs:
      frontend_hosts:
        description: 'CSV de hosts EC2 para frontend (opcional)'
        required: false
        type: string
      frontend_target_path:
        description: 'Pasta de deploy nos hosts frontend (ex: /usr/share/nginx/html)'
        required: false
        type: string
      backend_hosts:
        description: 'CSV de hosts EC2 para backend (opcional)'
        required: false
        type: string
      backend_target_path:
        description: 'Pasta de deploy nos hosts backend (ex: /opt/apps/service-name)'
        required: false
        type: string
      backend_service_name:
        description: 'Nome do systemd service nos hosts backend (ex: my-service)'
        required: false
        type: string
      lb_host:
        description: 'Host público para o Load-Balancer NGINX'
        required: false
        type: string
      upstream_backend_hosts:
        description: 'CSV de hosts backend que farão parte do upstream no LB'
        required: false
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      SSH_USER:
        required: true
      BASTION_HOST:
        required: true
      BASTION_USER:
        required: true

jobs:
  configure-nginx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH key and config (ProxyJump)
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat > ~/.ssh/config << 'EOF'
          Host bastion
            HostName __BASTION_HOST__
            User __BASTION_USER__
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          
          Host *
            IdentityFile ~/.ssh/id_rsa
            ProxyJump bastion
            StrictHostKeyChecking no
          EOF
          sed -i "s|__BASTION_HOST__|${{ secrets.BASTION_HOST }}|g" ~/.ssh/config
          sed -i "s|__BASTION_USER__|${{ secrets.BASTION_USER }}|g" ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Install NGINX on frontend hosts
        if: ${{ inputs.frontend_hosts && inputs.frontend_target_path }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          IFS=',' read -r -a FH <<< "${{ inputs.frontend_hosts }}"
          for host in "${FH[@]}"; do
            echo "Installing NGINX on frontend host: $host"
            ssh ${SSH_USER}@${host} "sudo apt update && sudo apt install -y nginx && sudo systemctl enable nginx && sudo systemctl start nginx"
          done

      - name: Configure NGINX static frontend
        if: ${{ inputs.frontend_hosts && inputs.frontend_target_path }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          TARGET_PATH: ${{ inputs.frontend_target_path }}
        run: |
          IFS=',' read -r -a FH <<< "${{ inputs.frontend_hosts }}"
          for host in "${FH[@]}"; do
            echo "Configuring NGINX for frontend host: $host"
            ssh-keyscan -H "$host" >> ~/.ssh/known_hosts || true
            ssh ${SSH_USER}@${host} "
              sudo tee /etc/nginx/conf.d/frontend.conf > /dev/null <<EOF
              server {
                  listen 80;
                  root ${TARGET_PATH};
                  index index.html;
                  location / {
                      try_files \$uri \$uri/ /index.html;
                  }
              }
              EOF
                            sudo systemctl reload nginx
                          "
                        done

      - name: Install NGINX on backend hosts
        if: ${{ inputs.backend_hosts && inputs.backend_target_path && inputs.backend_service_name }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          IFS=',' read -r -a BH <<< "${{ inputs.backend_hosts }}"
          for host in "${BH[@]}"; do
            echo "Installing NGINX on backend host: $host"
            ssh ${SSH_USER}@${host} "sudo apt update && sudo apt install -y nginx && sudo systemctl enable nginx && sudo systemctl start nginx"
          done

      - name: Configure NGINX reverse proxy backend
        if: ${{ inputs.backend_hosts && inputs.backend_target_path && inputs.backend_service_name }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          IFS=',' read -r -a BH <<< "${{ inputs.backend_hosts }}"
          for host in "${BH[@]}"; do
            echo "Configuring NGINX for backend host: $host"
            ssh-keyscan -H "$host" >> ~/.ssh/known_hosts || true
            ssh ${SSH_USER}@${host} "
              sudo tee /etc/nginx/conf.d/backend.conf > /dev/null <<EOF
              upstream backend_app {
                  server ${host}:8080;
              }
              server {
                  listen 80;
                  location / {
                      proxy_pass http://backend_app;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
              EOF
                            sudo systemctl reload nginx
                          "
                        done

      - name: Configure Load-Balancer NGINX
        if: ${{ inputs.lb_host && inputs.upstream_backend_hosts }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          UPSTREAM: ${{ inputs.upstream_backend_hosts }}
        run: |
          echo "Configuring Load-Balancer on ${ { inputs.lb_host } }"
          IFS=',' read -r -a UP <<< "${UPSTREAM}"
          BLOCK="upstream backend_app {\n"
          for s in "${UP[@]}"; do
            BLOCK+="    server ${s};\n"
          done
          BLOCK+="}\n"
          cat > /tmp/load-balancer.conf <<EOF
          ${BLOCK}
          server {
              listen 80;
              location / {
                  proxy_pass http://backend_app;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF
          ssh-keyscan -H "${{ inputs.lb_host }}" >> ~/.ssh/known_hosts || true
          scp -o BatchMode=yes /tmp/load-balancer.conf ${SSH_USER}@${{ inputs.lb_host }}:/etc/nginx/conf.d/load-balancer.conf
          ssh -o BatchMode=yes ${SSH_USER}@${{ inputs.lb_host }} "
            sudo nginx -t && sudo systemctl reload nginx
          "
          echo "Load-Balancer configured on ${ { inputs.lb_host } } (upstream: ${UPSTREAM})"

      - name: Cleanup SSH key
        if: always()
        run: |
          shred -u ~/.ssh/id_rsa || rm -f ~/.ssh/id_rsa || true
          rm -f ~/.ssh/config || true
