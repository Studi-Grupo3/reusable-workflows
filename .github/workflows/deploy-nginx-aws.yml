name: Deploy to AWS via SSH

on:
  workflow_call:
    inputs:
      app_type:
        description: 'frontend or backend'
        required: true
        type: string
      target_host:
        description: 'Host EC2 alvo para deploy deste serviÃ§o'
        required: false
        type: string
      target_path:
        description: 'Pasta de deploy no host'
        required: false
        type: string
      service_name:
        description: 'Nome do systemd service (apenas backend)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup SSH key and config (ProxyJump)
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          cat > ~/.ssh/config <<'EOF'
          Host bastion
            HostName __BASTION_HOST__
            User __BASTION_USER__
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no

          Host *
            IdentityFile ~/.ssh/id_rsa
            ProxyJump bastion
            StrictHostKeyChecking no
          EOF
          sed -i "s|__BASTION_HOST__|${{ secrets.BASTION_HOST }}|g" ~/.ssh/config
          sed -i "s|__BASTION_USER__|${{ secrets.BASTION_USER }}|g" ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          name: app-build
          path: artifacts

      - name: Deploy frontend
        if: ${{ inputs.app_type == 'frontend' }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          TARGET_HOST: ${{ inputs.target_host }}
          TARGET_PATH: ${{ inputs.target_path }}
        run: |
          set -e
          ART=$(ls artifacts/*.tar.gz 2>/dev/null | head -n1)
          if [ -z "$ART" ]; then
            echo "::error::Nenhum tar.gz encontrado no artifact"
            exit 1
          fi

          ssh-keyscan -H "$TARGET_HOST" >> ~/.ssh/known_hosts || true
          scp -o BatchMode=yes "$ART" ${SSH_USER}@${TARGET_HOST}:/tmp/build.tar.gz
          ssh -o BatchMode=yes ${SSH_USER}@${TARGET_HOST} "
            sudo mkdir -p ${TARGET_PATH} &&
            sudo rm -rf ${TARGET_PATH}/* &&
            sudo tar -xzf /tmp/build.tar.gz -C ${TARGET_PATH} &&
            sudo chown -R www-data:www-data ${TARGET_PATH} || true
          "
          echo "Frontend deployed to ${TARGET_HOST}:${TARGET_PATH}"

      - name: Deploy backend
        if: ${{ inputs.app_type == 'backend' }}
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          TARGET_HOST: ${{ inputs.target_host }}
          TARGET_PATH: ${{ inputs.target_path }}
          SERVICE_NAME: ${{ inputs.service_name }}
        run: |
          set -e
          ART=$(ls artifacts/*.jar 2>/dev/null | head -n1)
          if [ -z "$ART" ]; then
            echo "::error::Nenhum JAR encontrado no artifact"
            exit 1
          fi

          ssh-keyscan -H "$TARGET_HOST" >> ~/.ssh/known_hosts || true
          scp -o BatchMode=yes "$ART" ${SSH_USER}@${TARGET_HOST}:/tmp/app.jar
          ssh -o BatchMode=yes ${SSH_USER}@${TARGET_HOST} "
            sudo mkdir -p ${TARGET_PATH} &&
            sudo mv /tmp/app.jar ${TARGET_PATH}/app.jar &&
            sudo chown -R appuser:appuser ${TARGET_PATH} || true &&
            sudo systemctl restart ${SERVICE_NAME} || true
          "
          echo "Backend deployed to ${TARGET_HOST}:${TARGET_PATH} (service: ${SERVICE_NAME})"

      - name: Cleanup SSH key
        if: always()
        run: |
          shred -u ~/.ssh/id_rsa || rm -f ~/.ssh/id_rsa || true
          rm -f ~/.ssh/config || true
